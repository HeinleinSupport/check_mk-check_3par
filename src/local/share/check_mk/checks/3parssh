#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

import simplejson as json

################################################################################
# __      __        _       _     _      
# \ \    / /       (_)     | |   | |     
#  \ \  / /_ _ _ __ _  __ _| |__ | | ___ 
#   \ \/ / _` | '__| |/ _` | '_ \| |/ _ \
#    \  / (_| | |  | | (_| | |_) | |  __/
#     \/ \__,_|_|  |_|\__,_|_.__/|_|\___|
#                                        
################################################################################

threepar_default_levels = {}
factory_settings["threepar_default_levels"] = {}

################################################################################
#    _____           _                 
#  / ____|         | |                
# | (___  _   _ ___| |_ ___ _ __ ___  
#  \___ \| | | / __| __/ _ \ '_ ` _ \ 
#  ____) | |_| \__ \ ||  __/ | | | | |
# |_____/ \__, |___/\__\___|_| |_| |_|
#          __/ |                      
#         |___/
#         
################################################################################

threepar_node_cpu_default_levels = { "levels": (20.0, 10.0) }
factory_settings["threepar_node_cpu_default_levels"] = { "levels": (20.0, 10.0) }

def inventory_3parstatcpu(parsed):
    inventory = []

    data = parsed["statcpu"]

    for node in data[3:]:
        nodeid = "CPU Node %s" % ( node[0].split(",")[0] )
        inventory += [ ( nodeid, {} ) ]

    return inventory

def check_3parstatcpu(item, params, parsed):
    state       = 3
    infotext    = ""
    perfdata    = []

    data = parsed["statcpu"]

    for nodeInfos in data[3:]:
        node = nodeInfos[0].split(",")[0]
        if item != ( "CPU Node %s" % ( node ) ):
            continue

        desc, user, sys, idle, intr, ctxt = nodeInfos[0].split()

        warn, crit = params["levels"]
        
        perfdata.append( ( "user", user ) )
        perfdata.append( ( "sys", sys ) )
        perfdata.append( ( "idle", idle ) )
        perfdata.append( ( "intr", intr ) )
        perfdata.append( ( "ctxt", ctxt ) )

        utilized = 100-int(idle)

        if utilized >= crit:
            state = max( state, 2 )
        elif utilized >= warn:
            state = max( state, 1 )
        else:
            state = 0

        infotext = "Node %s is %s%% utilized (%s%% idle)" % ( node, utilized, idle )
        state = 0

    if infotext == "":
        infotext = "No item implemented"

    return ( state, infotext, perfdata )

check_info["3parssh"] = {
    'default_levels_variable':  "threepar_node_cpu_default_levels",
    'check_function':           check_3parstatcpu,
    'inventory_function':       inventory_3parstatcpu,
    'parse_function':           parse_3parssh,
    'service_description':      'Status %s',
    "has_perfdata"        :     True,
    'group':                    '3par_nodecpu',
    'includes':                [ '3par.include' ],
}


################################################################################
#    _____           _                 
#  / ____|         | |                
# | (___  _   _ ___| |_ ___ _ __ ___  
#  \___ \| | | / __| __/ _ \ '_ ` _ \ 
#  ____) | |_| \__ \ ||  __/ | | | | |
# |_____/ \__, |___/\__\___|_| |_| |_|
#          __/ |                      
#         |___/
#         
################################################################################

def inventory_3par_cages(parsed):
    inventory = []

    data = parsed["showcage"]

    for cageNum in data:
        cageId = "Cage %s" % ( cageNum )
        inventory += [ ( cageId, {} ) ]

    return inventory

def check_3par_cages(item, params, parsed):
    state       = -1
    infotext    = ""
    perfdata    = []

    data = parsed["showcage"]

    for cageNum in data:
        cageId = "Cage %s" % ( cageNum )
        if item != cageId:
            continue

        firmware_card0 = data[cageNum][3][0].split()[1]
        firmware_card1 = data[cageNum][3][0].split()[2]

        state_card0 = data[cageNum][5][0].split()[1].split(",")[0]
        state_card1 = data[cageNum][5][0].split()[1].split(",")[1]

        ps0_desc, ps0_state, ps0_ac, ps0_dc, ps0_fanstate, ps0_f0speed, ps0_f1speed = data[cageNum][11][0].split()
        ps1_desc, ps1_state, ps1_ac, ps1_dc, ps1_fanstate, ps1_f0speed, ps1_f1speed = data[cageNum][12][0].split()

        if state_card0 != "OK":
            infotext += "State Card 0 is %s" % ( state_card0 )
            state = max( state, 1 )
        if state_card1 != "OK":
            infotext += "State Card 1 is %s" % ( state_card1 )
            state = max( state, 1 )

        if firmware_card0 != "Current":
            infotext += "Firmware Card 0 is %s" % ( firmware_card0 )
            state = max( state, 1 )
        if firmware_card1 != "Current":
            infotext += "Firmware Card 1 is %s" % ( firmware_card1 )
            state = max( state, 1 )

        if ps0_state != "OK":
            infotext += "PS 0 State is %s" % ( ps0_state )
            state = max( state, 1 )
        if ps1_state != "OK":
            infotext += "PS 1 State is %s" % ( ps1_state )
            state = max( state, 1 )

        state = max( state, 0 )

    if infotext == "":
        infotext = "All OK"

    if state == -1:
        state = 3

    return ( state, infotext, perfdata )

check_info["3parssh.cages"] = {
    'default_levels_variable':  "threepar_default_levels",
    'parse_function':           parse_3parssh,
    'check_function':           check_3par_cages,
    'inventory_function':       inventory_3par_cages,
    'service_description':      'Status %s',
    "has_perfdata"        :     True,
    'group':                    'Storage',
    'includes':                [ '3par.include' ],
}


