#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

import simplejson as json

################################################################################
# __      __        _       _     _      
# \ \    / /       (_)     | |   | |     
#  \ \  / /_ _ _ __ _  __ _| |__ | | ___ 
#   \ \/ / _` | '__| |/ _` | '_ \| |/ _ \
#    \  / (_| | |  | | (_| | |_) | |  __/
#     \/ \__,_|_|  |_|\__,_|_.__/|_|\___|
#                                        
################################################################################

filter_ZeroVVCPG = True
filter_NoSystemVols = True

threepar_default_levels = {}
factory_settings["threepar_default_levels"] = {}

threepar_flashcache_default_levels = {}
factory_settings["threepar_flashcache_default_levels"] = {
    "flashcache_state_warning"   : 2,
    "flashcache_state_critical"  : 3,
    "levels" : ( 80.0, 90.0 ),
}

threepar_cpgs_default_levels = {}
factory_settings["threepar_cpgs_default_levels"] = {
    "cpgstatus_warning"  : 2,
    "cpgstatus_critical" : 3,
    "levels" : ( 80.0, 90.0 ),
}

threepar_volumes_default_levels = {}
factory_settings["threepar_volumes_default_levels"] = {
    "volstatus_warning"  : 2,
    "volstatus_critical" : 3,
    "levels" : ( 80.0, 90.0 ),
    "compaction_grade" : ( 0.5, 0.2 ),
}

threepar_ports_default_levels = {}
factory_settings["threepar_ports_default_levels"] = {
    "linkState-1"     : 1,
    "linkState-2"     : 1,
    "linkState-3"     : 1,
    "linkState-4"     : 0,
    "linkState-5"     : 1,
    "linkState-6"     : 2,
    "linkState-7"     : 1,
    "linkState-8"     : 0,
    "linkState-9"     : 1,
    "linkState-10"    : 1,
    "linkState-11"    : 1,
    "linkState-12"    : 1,
    "linkState-13"    : 1,
    "linkState-14"    : 1,
    "failoverState-1" : 0,
    "failoverState-2" : 2,
    "failoverState-3" : 2,
    "failoverState-4" : 2,
    "failoverState-5" : 2,
    "failoverState-6" : 2,
    "failoverState-7" : 1,
}

################################################################################
#   _____                                      
#  / ____|                                     
# | |     ___  _ __ ___  _ __ ___   ___  _ __  
# | |    / _ \| '_ ` _ \| '_ ` _ \ / _ \| '_ \ 
# | |___| (_) | | | | | | | | | | | (_) | | | |
#  \_____\___/|_| |_| |_|_| |_| |_|\___/|_| |_|
#
################################################################################

def parse_3par(info):
    a = [item for sublist in info for item in sublist]
    b = ''.join(a)
    parsed = json.loads(b)
    return parsed

################################################################################
#    _____           _                 
#  / ____|         | |                
# | (___  _   _ ___| |_ ___ _ __ ___  
#  \___ \| | | / __| __/ _ \ '_ ` _ \ 
#  ____) | |_| \__ \ ||  __/ | | | | |
# |_____/ \__, |___/\__\___|_| |_| |_|
#          __/ |                      
#         |___/
#         
################################################################################

def inventory_3par(parsed):
    return [ ( "SystemInfos", {} ) ]

def check_3par(item, params, parsed):
    state       = 3
    infotext    = "No item implemented"

    state    = 0                 # TODO: echten State übergeben
    infotext = ""

    systemInfos = parsed["system"]

    infotext = "%s Node %s (SN: %s / V: %s)" % ( systemInfos["totalNodes"], systemInfos["model"], systemInfos["serialNumber"], systemInfos["systemVersion"] )

    # TODO: what if node removed?
    if len(systemInfos["onlineNodes"]) < systemInfos["totalNodes"]:
        state = 2
        infotext = "Only %s of %s nodes online!" % ( systemInfos["onlineNodes"], systemInfos["totalNodes"] )
    else:
        state = 0

    return ( state, infotext )

check_info["3par"] = {
    'default_levels_variable':  "threepar_default_levels",
    'check_function':           check_3par,
    'inventory_function':       inventory_3par,
    'parse_function':           parse_3par,
    'service_description':      'System Status - %s',
    "has_perfdata"        :     False,
    'group':                    'Storage',
}

################################################################################
# Total Capacity
################################################################################

def inventory_3par_systemtotalcap(parsed):
    return [ ( "SystemTotalCapacity", {} ) ]

def check_3par_systemtotalcap(item, params, parsed):
    state       = 3
    infotext    = "No item implemented"
    perfdata    = []

    state    = 0                 # TODO: echten State übergeben
    infotext = ""

    systemInfos = parsed["system"]

    used_mb = systemInfos["allocatedCapacityMiB"] * 1.048576
    size_mb = systemInfos["totalCapacityMiB"] * 1.048576
    used_perc = 100.0 * (float(used_mb) / size_mb)
    size_gb   = size_mb / 1024.0
    used_hr = get_bytes_human_readable(used_mb * 1024 * 1024)
    size_hr = get_bytes_human_readable(size_mb * 1024 * 1024)

    # If both numbers end with both MB or GB or TB, then drop the first one
    if used_hr[-2:] == size_hr[-2:]:
        used_hr = used_hr[:-3]

    levels = get_filesystem_levels("bla", "volume", size_gb, params)
    warn_mb, crit_mb       = levels["levels_mb"]

    if warn_mb <= -1:
        #Negativ levels, so calculate mb left
        rest_mb = size_mb - used_mb
        crit_mb = crit_mb * -1
        warn_mb = warn_mb * -1
        if rest_mb <= crit_mb:
            state = 2
        elif rest_mb <= warn_mb:
            state = max(1, state)
        else:
            state = 0
    else:
        if used_mb >= crit_mb:
            state = 2
        elif used_mb >= warn_mb:
            state = max(1, state)
        else:
            state = 0

    #infotext = "{:.0f}% used ({:.1f} of {:.1f} GB),(levels at {:.2f}/{:.2f}%)".format( used_perc, used_hr, size_hr, params["levels"][0], params["levels"][1] )
    if used_perc > 0:
        perc_precision = max(1, 2 - int(round(math.log(used_perc, 10))))
    else:
        perc_precision = 1
    
    infotext += "%%.%df%%%% used (%%s of %%s), %%s" % perc_precision % (used_perc, used_hr, size_hr, levels["levels_text"])

    perfdata.append( ( "allocatedCapacityMiB", systemInfos["allocatedCapacityMiB"], params["levels"][0], params["levels"][1], 0, systemInfos["totalCapacityMiB"] ) )

    return ( state, infotext, perfdata )

check_info["3par.SystemTotalCapacity"] = {
    "group"                   : "filesystem",
    'default_levels_variable':  "filesystem_default_levels",
    'check_function':           check_3par_systemtotalcap,
    'inventory_function':       inventory_3par_systemtotalcap,
    'parse_function':           parse_3par,
    'service_description':      'Total Capacity',
    "has_perfdata"        :     True,
}


################################################################################
# Total failed capacity
################################################################################
def inventory_3par_systemfailedcap(parsed):
    return [ ( "SystemFailedCapacity", {} ) ]

def check_3par_systemfailedcap(item, params, parsed):
    state       = 3
    infotext    = "No item implemented"
    perfdata    = []

    state    = 0                 # TODO: echten State übergeben
    infotext = ""

    systemInfos = parsed["system"]

    used_mb = systemInfos["failedCapacityMiB"] * 1.048576
    size_mb = systemInfos["totalCapacityMiB"] * 1.048576
    used_perc = 100.0 * (float(used_mb) / size_mb)
    size_gb   = size_mb / 1024.0
    used_hr = get_bytes_human_readable(used_mb * 1024 * 1024)
    size_hr = get_bytes_human_readable(size_mb * 1024 * 1024)

    # If both numbers end with both MB or GB or TB, then drop the first one
    if used_hr[-2:] == size_hr[-2:]:
        used_hr = used_hr[:-3]

    levels = get_filesystem_levels("bla", "volume", size_gb, params)
    warn_mb, crit_mb       = levels["levels_mb"]

    #print used_hr
    #print used_mb
    #print warn_mb
    #print crit_mb

    #3.66
    #3838627.0208
    #3660.0
    #4000.0

    if warn_mb <= -1:
        #Negativ levels, so calculate mb left
        rest_mb = size_mb - used_mb
        crit_mb = crit_mb * -1
        warn_mb = warn_mb * -1
        if rest_mb <= crit_mb:
            state = 2
        elif rest_mb <= warn_mb:
            state = max(1, state)
        else:
            state = 0
    else:
        if used_mb >= crit_mb:
            state = 2
        elif used_mb >= warn_mb:
            state = max(1, state)
        else:
            state = 0

    if used_perc > 0:
        perc_precision = max(1, 2 - int(round(math.log(used_perc, 10))))
    else:
        perc_precision = 1
    
    infotext += "%%.%df%%%% used (%%s of %%s), %%s" % perc_precision % (used_perc, used_hr, size_hr, levels["levels_text"])
    
    perfdata.append( ( "failedCapacityMiB", systemInfos["failedCapacityMiB"], params["levels"][0], params["levels"][1], 0, systemInfos["totalCapacityMiB"] ) )

    return ( state, infotext, perfdata )

check_info["3par.SystemFailedCapacity"] = {
    "group"                   : "filesystem",
    "default_levels_variable" : "filesystem_default_levels",
    'check_function':           check_3par_systemfailedcap,
    'inventory_function':       inventory_3par_systemfailedcap,
    'parse_function':           parse_3par,
    'service_description':      'Total Failed',
    "has_perfdata"        :     True,
}

##############################################
#  _    _           _       
# | |  | |         | |      
# | |__| | ___  ___| |_ ___ 
# |  __  |/ _ \/ __| __/ __|
# | |  | | (_) \__ \ |_\__ \
# |_|  |_|\___/|___/\__|___/
#                           
##############################################

def inventory_3par_hosts(parsed):
    inventory = []

    if "hosts" not in parsed:
        return inventory

    for host in parsed["hosts"]["members"]:
        inventory.append( ( host["name"], None ) )

    return inventory

def check_3par_hosts(item, params, parsed):
    state       = 3
    infotext    = "No item implemented"
    perfdata    = []

    if "hosts" not in parsed:
        return ( state, infotext, perfdata )

    for host in parsed["hosts"]["members"]:
        if item == host["name"]:
            infotext = "Host: %s" % ( host["name"] )
            state = 0

            portCount = get_hostports_state( item, params, parsed )

            infotext += " on %s Ports" % ( portCount )

            return ( state, infotext, perfdata )

def get_hostports_state(host, params, parsed):
    portCount  = 0

    if "ports" not in parsed:
        return portCount

    for port in parsed["ports"]["members"]:

        if "device" not in port:
            return portCount

        if host in port["device"]:
            portCount += 1

    return portCount

check_info["3par.hosts"] = {
    'default_levels_variable':  "threepar_default_levels",
    'check_function':           check_3par_hosts,
    'inventory_function':       inventory_3par_hosts,
    'parse_function':           parse_3par,
    'service_description':      'Host Status - %s',
    "has_perfdata"        :     True,
    'group':                    'Storage',
}

##############################################
#   _____ _____   _____     
#  / ____|  __ \ / ____|    
# | |    | |__) | |  __ ___ 
# | |    |  ___/| | |_ / __|
# | |____| |    | |__| \__ \
#  \_____|_|     \_____|___/
#                           
##############################################

def inventory_3par_cpgs(parsed):
    inventory = []

    if "cpgs" not in parsed:
        return inventory

    for cpg in parsed["cpgs"]["members"]:
        totalVVs = ( cpg["numFPVVs"] + cpg["numTDVVs"] + cpg["numTPVVs"] )      # TODO: precompute? store?
        if filter_ZeroVVCPG and totalVVs <= 0:                                  # TODO: inventory parameters
            continue
        inventory.append( ( cpg["name"], {} ) )

    return inventory

def check_3par_cpgs(item, params, parsed):
    state       = 3
    infotext    = "No item implemented"
    perfdata    = []

    if "cpgs" not in parsed:
        return ( state, infotext, perfdata )

    for cpg in parsed["cpgs"]["members"]:
        if item == cpg["name"]:
            totalVVs = ( cpg["numFPVVs"] + cpg["numTDVVs"] + cpg["numTPVVs"] )

            used_mb = cpg["UsrUsage"]["usedMiB"] * 1.048576
            size_mb = cpg["UsrUsage"]["totalMiB"] * 1.048576
            used_perc = 100.0 * (float(used_mb) / size_mb)
            size_gb   = size_mb / 1024.0
            used_hr = get_bytes_human_readable(used_mb * 1024 * 1024)
            size_hr = get_bytes_human_readable(size_mb * 1024 * 1024)
            cstate = cpg["state"] - 1

            # If both numbers end with both MB or GB or TB, then drop the first one
            if used_hr[-2:] == size_hr[-2:]:
                used_hr = used_hr[:-3]

            levels = get_filesystem_levels("bla", "cpg", size_gb, params)
            warn_mb, crit_mb       = levels["levels_mb"]

            if warn_mb <= -1:
                #Negativ levels, so calculate mb left
                rest_mb = size_mb - used_mb
                crit_mb = crit_mb * -1
                warn_mb = warn_mb * -1
                if rest_mb <= crit_mb:
                    state = 2
                elif rest_mb <= warn_mb:
                    state = max(1, state)
                else:
                    state = 0
            else:
                if used_mb >= crit_mb:
                    state = 2
                elif used_mb >= warn_mb:
                    state = max(1, state)
                else:
                    state = 0

            if cstate >= levels["cpgstatus_critical"]:
                state = max(2, state)
            elif cstate >= levels["cpgstatus_warning"]:
                state = max(1, state)
            else:
                state = max(0, state)

            if cpg["state"] >= 3:
                stateWord = "FAILED"
            elif cpg["state"] >= 2:
                stateWord = "DEGRADED"
            elif cpg["state"] == 1:
                stateWord = "NORMAL"
            else:
                stateWord = "UNKNOWN"

            infotext = "%s - %s VVs" % ( stateWord, totalVVs )

            if used_perc > 0:
                perc_precision = max(1, 2 - int(round(math.log(used_perc, 10))))
            else:
                perc_precision = 1
            infotext += " - %%.%df%%%% used (%%s of %%s), %%s" % perc_precision % (used_perc, used_hr, size_hr, levels["levels_text"])

            perfdata.append( ( "UsrUsedMiB", cpg["UsrUsage"]["usedMiB"], warn_mb, crit_mb, 0, cpg["UsrUsage"]["totalMiB"] ) )

            return ( state, infotext, perfdata )

check_info["3par.cpgs"] = {
    'group':                    '3par_cpgs',
    'default_levels_variable':  "threepar_cpgs_default_levels",
    'check_function':           check_3par_cpgs,
    'inventory_function':       inventory_3par_cpgs,
    'parse_function':           parse_3par,
    'service_description':      'CPG Status - %s',
    "has_perfdata"        :     True,
    "includes"                : [ "df.include" ],
}


##############################################
#  ______ _           _                    _          
# |  ____| |         | |                  | |         
# | |__  | | __ _ ___| |__   ___ __ _  ___| |__   ___ 
# |  __| | |/ _` / __| '_ \ / __/ _` |/ __| '_ \ / _ \
# | |    | | (_| \__ \ | | | (_| (_| | (__| | | |  __/
# |_|    |_|\__,_|___/_| |_|\___\__,_|\___|_| |_|\___|
#
##############################################

def inventory_3par_flashcache(parsed):
    inventory = []

    if "flashcache" not in parsed:
        return inventory

    if "code" in parsed["flashcache"] and parsed["flashcache"]["code"] == 285:
        return inventory

    return [ ( "FlashCache", {} ) ]

def check_3par_flashcache(item, params, parsed):
    state    = 0
    infotext = ""
    perfdata = []

    if parsed["flashcache"]["mode"] != 2:
        infotext = "Simulator Mode!"

    if parsed["flashcache"]["state"] >= params["flashcache_state_critical"]:
        state = max( 2, state)
    elif parsed["flashcache"]["state"] >= params["flashcache_state_warning"]:
        state = max( 1, state)
    else:
        state = max( 0, state)

    if parsed["flashcache"]["state"] == 3:
        infotext = "State Failed - " + infotext
    elif parsed["flashcache"]["state"] == 2:
        infotext = "State Degraded - " + infotext
    else:
        infotext = "State Normal -" + infotext

    levels = get_filesystem_levels("bla", "flashcache", parsed["flashcache"]["sizeGiB"], params)
    warn_mb, crit_mb = levels["levels_mb"]
    infotext = infotext + " %s GiB of %s GiB %s" % ( parsed["flashcache"]["usedSizeGiB"], parsed["flashcache"]["sizeGiB"], levels["levels_text"] )

    if parsed["flashcache"]["usedSizeGiB"] > ( crit_mb / 1024 ):
        state = max( 2, state)
    elif parsed["flashcache"]["usedSizeGiB"] > ( warn_mb / 1024 ):
        state = max( 1, state)
    else:
        state = max( 0, state)

    perfdata.append( ( "used", parsed["flashcache"]["usedSizeGiB"], ( warn_mb / 1024 ), ( crit_mb / 1024 ), 0, parsed["flashcache"]["sizeGiB"] ) )

    return ( state, infotext, perfdata )

check_info["3par.flashcache"] = {
    'default_levels_variable':  "threepar_flashcache_default_levels",
    'check_function':           check_3par_flashcache,
    'inventory_function':       inventory_3par_flashcache,
    'parse_function':           parse_3par,
    'service_description':      'Status - %s',
    "has_perfdata"        :     True,
    'group':                    '3par_flashcache',
}

##############################################
#  __      __   _                           
#  \ \    / /  | |                          
#   \ \  / /__ | |_   _ _ __ ___   ___  ___ 
#    \ \/ / _ \| | | | | '_ ` _ \ / _ \/ __|
#     \  / (_) | | |_| | | | | | |  __/\__ \
#      \/ \___/|_|\__,_|_| |_| |_|\___||___/
#
##############################################

def inventory_3par_vols(parsed):
    inventory = []
    if "volumes" in parsed:
        for vol in parsed["volumes"]["members"]:
            if filter_NoSystemVols and vol["policies"]["system"] == True:
                continue

            inventory.append( ( vol["name"], None ) )

    return inventory

def get_sysrep_vlunstatistics(vlun, parsed):
    stats = {}
    for member in parsed["sysrep_vlunstatistics"]["members"]:
        if member["volumeName"] != vlun:
            continue

        memberid = "%s:%s:%s:%s" % ( member["node"], member["slot"], member["cardPort"], member["hostname"] )
        stats[memberid] = member

    values   = {}
    IO_read  = 0
    IO_write = 0
    IO_total = 0

    for member in stats:
        IO_read  += stats[member]["IO"]["read"]
        IO_write += stats[member]["IO"]["write"]
        IO_total += stats[member]["IO"]["total"]

    values = {
        'IO':   { 'read': IO_read, 'write': IO_write, 'total': IO_total }
    }

    return values

def check_3par_vols(item, params, parsed):
    state       = 3
    infotext    = "No item implemented"
    perfdata    = []

    if "volumes" in parsed:
        for vol in parsed["volumes"]["members"]:
            if item != vol["name"]:
                continue

            if "sysrep_vlunstatistics" in parsed:
                stats = get_sysrep_vlunstatistics( item, parsed )
                perfdata.append( ( "IO_read", stats['IO']['read'] ) )
                perfdata.append( ( "IO_write", stats['IO']['write'] ) )
                perfdata.append( ( "IO_total", stats['IO']['total'] ) )

            vstate = vol["state"] - 1

            used_mb = vol["userSpace"]["usedMiB"] * 1.048576
            size_mb = vol["sizeMiB"] * 1.048576
            used_perc = 100.0 * (float(used_mb) / size_mb)
            size_gb   = size_mb / 1024.0
            used_hr = get_bytes_human_readable(used_mb * 1024 * 1024)
            size_hr = get_bytes_human_readable(size_mb * 1024 * 1024)
            cstate = vol["state"] - 1

            # If both numbers end with both MB or GB or TB, then drop the first one
            if used_hr[-2:] == size_hr[-2:]:
                used_hr = used_hr[:-3]

            levels = get_filesystem_levels("bla", "volume", size_gb, params)
            warn_mb, crit_mb       = levels["levels_mb"]
            warn_grade, crit_grade = levels["compaction_grade"]

            if warn_mb <= -1:
                #Negativ levels, so calculate mb left
                rest_mb = size_mb - used_mb
                crit_mb = crit_mb * -1
                warn_mb = warn_mb * -1
                if rest_mb <= crit_mb:
                    state = 2
                elif rest_mb <= warn_mb:
                    state = max(1, state)
                else:
                    state = 0
            else:
                if used_mb >= crit_mb:
                    state = 2
                elif used_mb >= warn_mb:
                    state = max(1, state)
                else:
                    state = 0
            if vstate >= levels["volstatus_critical"]:
                state = max(2, state)
            elif vstate >= levels["volstatus_warning"]:
                state = max(1, state)
            else:
                state = max(0, state)

            if vol["state"] >= 3:
                stateWord = "FAILED"
            elif vol["state"] >= 2:
                stateWord = "DEGRADED"
            elif vol["state"] == 1:
                stateWord = "NORMAL"
            else:
                stateWord = "UNKNOWN"

            infotext = "%s - ID %s" % ( stateWord, vol["baseId"] )

            if used_perc > 0:
                perc_precision = max(1, 2 - int(round(math.log(used_perc, 10))))
            else:
                perc_precision = 1
            infotext += " - %%.%df%%%% used (%%s of %%s), %%s" % perc_precision % (used_perc, used_hr, size_hr, levels["levels_text"])

            perfdata.append( ( "UsrUsedMiB", vol["userSpace"]["usedMiB"], warn_mb, crit_mb, vol["sizeMiB"] ) )
            perfdata.append( ( "Compaction", vol["capacityEfficiency"]["compaction"], warn_grade, crit_grade ) )

            return ( state, infotext, perfdata )

check_info["3par.vols"] = {
    'default_levels_variable':  "threepar_volumes_default_levels",
    'check_function':           check_3par_vols,
    'inventory_function':       inventory_3par_vols,
    'parse_function':           parse_3par,
    'service_description':      'Vol Status - %s',
    "has_perfdata"        :     True,
    'group':                    '3par_volumes',
}


##############################################
#    _____           _       
#   |  __ \         | |      
#   | |__) |__  _ __| |_ ___ 
#   |  ___/ _ \| '__| __/ __|
#   | |  | (_) | |  | |_\__ \
#   |_|   \___/|_|   \__|___/
# 
##############################################

def inventory_3par_ports(parsed):
    inventory = []

    if "ports" in parsed:
        for port in parsed["ports"]["members"]:
            if "label" in port and "portWWN" in port:
                inventory.append( ( port["label"] + "-" + port["portWWN"], None ) )
            elif "label" in port:
                inventory.append( ( port["label"], None ) )
            elif "portWWN" in port:
                inventory.append( ( port["portWWN"], None ) )

    return inventory

def check_3par_ports(item, params, parsed):
    if "ports" in parsed:
        for port in parsed["ports"]["members"]:
            state       = -1
            infotext    = "No item implemented"
            perfdata    = []
            portName    = ""
            portPos     = ""

            if "label" in port:
                if "portWWN" in port:
                    portName = port["label"] + "-" + port["portWWN"]
                else:
                    portName = port["label"]
            elif "portWWN" in port:
                portName = port["portWWN"]

            if item != portName:
                continue

            if "protocol" in port:
                if port["protocol"] == 1:   infotext = "FC"
                elif port["protocol"] == 2: infotext = "iSCSI"
                elif port["protocol"] == 3: infotext = "FCOE"
                elif port["protocol"] == 4: infotext = "IP"
                elif port["protocol"] == 5: infotext = "SAS"

            if "mode" in port:
                if port["mode"] == 1:   infotext += " / SUSPENDED"
                elif port["mode"] == 2: infotext += " / TARGET"
                elif port["mode"] == 3: infotext += " / INITIATOR"
                elif port["mode"] == 4: infotext += " / PEER"

            if "linkState" in port:
                paramKey = "linkState-%s" % ( port["linkState"] )
                state = max( state, params[paramKey] )

                if port["linkState"] == 1:      infotext += " - CONFIG_WAIT"
                elif port["linkState"] == 2:    infotext += " - ALPA_WAIT"
                elif port["linkState"] == 3:    infotext += " - LOGIN_WAIT"
                elif port["linkState"] == 4:    infotext += " - READY"
                elif port["linkState"] == 5:    infotext += " - LOSS_SYNC"
                elif port["linkState"] == 6:    infotext += " - ERROR_STATE"
                elif port["linkState"] == 7:    infotext += " - XXX"
                elif port["linkState"] == 8:    infotext += " - NONPARTICIPATE"
                elif port["linkState"] == 9:    infotext += " - COREDUMP"
                elif port["linkState"] == 10:   infotext += " - OFFLINE"
                elif port["linkState"] == 11:   infotext += " - FWDEAD"
                elif port["linkState"] == 12:   infotext += " - IDLE_FOR_RESET"
                elif port["linkState"] == 13:   infotext += " - DHCP_IN_PROGRESS"
                elif port["linkState"] == 14:   infotext += " - PENDING_RESET"

            if "failoverState" in port:
                paramKey = "failoverState-%s" % ( port["failoverState"] )
                state = max ( state, params[paramKey] )

                if port["failoverState"] == 1:      infotext += ""
                elif port["failoverState"] == 2:    infotext += " - FAILOVER_PENDING"
                elif port["failoverState"] == 3:    infotext += " - FAILED_OVER"
                elif port["failoverState"] == 4:    infotext += " - Failover ACTIVE"
                elif port["failoverState"] == 5:    infotext += " - Failover ACTIVE_DOWN"
                elif port["failoverState"] == 6:    infotext += " - Failover ACTIVE_FAILED"
                elif port["failoverState"] == 7:    infotext += " - FAILBACK_PENDING"

            if "portPos" in port:
                portPos = "%s:%s:%s" % ( port["portPos"]["node"], port["portPos"]["slot"], port["portPos"]["cardPort"] )
                infotext += " - %s" % ( portPos )

            if "partnerPos" in port:
                infotext += " (%s:%s:%s)" % ( port["partnerPos"]["node"], port["partnerPos"]["slot"], port["partnerPos"]["cardPort"] )

            if portPos != "" and "sysrep_portstatistics" in parsed:
                stats = get_sysrepstats_port( portPos, parsed )
                if 'serviceTimeMS' in stats:
                    perfdata.append( ( "serviceTimeMS_read", stats["serviceTimeMS"]["read"] ) )
                    perfdata.append( ( "serviceTimeMS_write", stats["serviceTimeMS"]["write"] ) )
                    perfdata.append( ( "serviceTimeMS_total", stats["serviceTimeMS"]["total"] ) )
                if 'IO' in stats:
                    perfdata.append( ( "IO_read", stats["IO"]["read"] ) )
                    perfdata.append( ( "IO_write", stats["IO"]["write"] ) )
                    perfdata.append( ( "IO_total", stats["IO"]["total"] ) )
                if 'IOSizeKB' in stats:
                    perfdata.append( ( "IOSizeKB_read", stats["IOSizeKB"]["read"] ) )
                    perfdata.append( ( "IOSizeKB_write", stats["IOSizeKB"]["write"] ) )
                    perfdata.append( ( "IOSizeKB_total", stats["IOSizeKB"]["total"] ) )
                if 'KBytes' in stats:
                    perfdata.append( ( "KBytes_read", stats["KBytes"]["read"] ) )
                    perfdata.append( ( "KBytes_write", stats["KBytes"]["write"] ) )
                    perfdata.append( ( "KBytes_total", stats["KBytes"]["total"] ) )
                if 'busyPct' in stats:
                    perfdata.append( ( "busyPct", stats["busyPct"] ) )
                if 'queueLength' in stats:
                    perfdata.append( ( "queueLength", stats["queueLength"] ) )

            if state == -1:
                state = 3

            return ( state, infotext, perfdata )

    if state == -1:
        state = 3
    return ( state, infotext, perfdata )

def get_sysrepstats_port(portPos, parsed):
    for member in parsed["sysrep_portstatistics"]["members"]:
        memberPos = "%s:%s:%s" % ( member["node"], member["slot"], member["cardPort"] )
        if memberPos != portPos:
            continue

        return member

    return {}

check_info["3par.ports"] = {
    'default_levels_variable':  "threepar_ports_default_levels",
    'check_function':           check_3par_ports,
    'inventory_function':       inventory_3par_ports,
    'parse_function':           parse_3par,
    'service_description':      'Port Status - %s',
    "has_perfdata"        :     True,
    'group':                    '3par_ports',
}
